<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

	<!-- | There are 5 ways to use this subflow: | - changePassword | - forceChangePassword 
		| - forgotPassword | - setupSecurityQuestion | - passwordWarn + -->
	<input name="reqsrc_" type="java.lang.String" />

	<input name="pmTask" type="java.lang.String" required="true" />
	<input name="mtoken" type="java.lang.String" />

	<input name="credentials" type="org.jasig.cas.authentication.principal.Credentials"
		required="false" />
	<input name="service" type="java.lang.String" required="false" />
	<input name="expireHours" type="java.lang.Integer" required="false" />

	<decision-state id="init">
		<if test="flowScope.pmTask eq 'changePassword'" then="changePassword" />
		<if test="flowScope.pmTask eq 'checktoken'" then="checkToken" />
		<if test="flowScope.pmTask eq 'forceChangePassword'" then="forceChangePassword" />
		<if test="flowScope.pmTask eq 'forgotPassword'" then="forgotPassword" />
		<if test="flowScope.pmTask eq 'forgotPasswordQr'" then="forgotPasswordQr" />
		<if test="flowScope.pmTask eq 'setupSecurityQuestion'" then="preSetupSecurityQuestion" />
		<if test="flowScope.pmTask eq 'passwordWarn'" then="passwordWarn" />
	</decision-state>

	<decision-state id="changePassword">
		<if test="credentials != null and credentials.username != null"
			then="authdChangePassword" else="changePasswordView" />
	</decision-state>

	<action-state id="forceChangePassword">
		<set name="flowScope.pwdChangeForced" value="true" />
		<transition to="forceChangePasswordSetupUsername" />
	</action-state>

	<action-state id="forceChangePasswordSetupUsername">
		<set name="flowScope.username" value="credentials.username" />
		<transition to="setPassword" />
	</action-state>

	<action-state id="authdChangePassword">
		<set name="flowScope.username" value="credentials.username" />
		<transition to="changePasswordView" />
	</action-state>

	<!-- Change password view prompting for old password. -->
	<view-state id="changePasswordView" view="casPmChangePassword"
		model="changePasswordBean">
		<var name="changePasswordBean" class="com.antruak.cas.pm.flow.model.ChangePasswordBean" />
		<binder>
			<binding property="username" required="false" />
			<binding property="oldPassword" />
			<binding property="newPassword" />
			<binding property="confirmNewPassword" />
		</binder>
		<on-render>
			<!-- <evaluate expression="lockoutService.allowAttempt(changePasswordBean.username)" 
				/> -->
			<evaluate expression="lockoutService.allowAttempt(flowScope.username)" />
			<!-- <evaluate expression="recaptchaValidationAction.getRecaptchaPublicKey()" -->
			<!-- result="viewScope.recaptchaPublicKey" /> -->
			<!-- <evaluate expression="recaptchaValidationAction.getRecaptchaPrivateKey()" -->
			<!-- result="viewScope.recaptchaPrivateKey" /> -->
		</on-render>
		<transition on="submitChangePassword" to="passwordChanged">
			<!-- Presume error. This will cause an error message to be displayed if 
				the following evaluate expression returns false. -->
			<set name="requestScope.changePasswordValidationError" value="true" />
			<!-- don't try to validate the ReCaptcha if we're authenticated -->
			<evaluate
				expression="flowScope.username != null or recaptchaValidationAction.validateCaptcha(flowRequestContext)" />
			<evaluate
				expression="processChangePasswordAction.changePassword(flowScope.username, changePasswordBean.username,
                changePasswordBean.oldPassword, changePasswordBean.newPassword, messageContext)" />
		</transition>
	</view-state>

	<view-state id="setPassword" view="casPmChangePassword"
		model="changePasswordBean">
		<var name="changePasswordBean" class="com.antruak.cas.pm.flow.model.ChangePasswordBean" />
		<binder>
			<binding property="newPassword" />
			<binding property="confirmNewPassword" />
		</binder>
		<transition on="submitChangePassword" to="passwordSet">
			<evaluate
				expression="processChangePasswordAction.setPassword(flowScope.username,
                changePasswordBean.newPassword, messageContext)" />
		</transition>
	</view-state>

	<view-state id="passwordChanged" view="casPmChangedPassword">
		<transition to="pmExit" />
	</view-state>

	<view-state id="forgotPassword" view="casPmForgotPassword"
		model="netIdBean">
		<var name="netIdBean" class="com.antruak.cas.pm.flow.model.NetIdBean" />
		<binder>
			<binding property="netId" />
		</binder>
		<transition on="submitId" to="lookupSecurityQuestion">
			<!-- Setting this error message flag now in case the ReCaptcha fails. -->
			<set name="requestScope.forgotPasswordValidationError" value="true" />
			<!-- <evaluate -->
			<!-- expression="recaptchaValidationAction.validateCaptcha(flowRequestContext)" 
				/> -->
			<set name="flowScope.username" value="netIdBean.netId" />
			<evaluate expression="lockoutService.allowAttempt(flowScope.username)" />
		</transition>

	</view-state>

	<view-state id="forgotPasswordQr" view="casPmForgotPasswordQr"
		model="netIdBean">
		<var name="netIdBean" class="com.antruak.cas.pm.flow.model.NetIdBean" />
		<binder>
			<binding property="netId" />
		</binder>
		<transition on="submitId" to="prepareQrToken">
			<set name="flowScope.username" value="netIdBean.netId" />
		</transition>

	</view-state>

	<action-state id="prepareQrToken">
		<evaluate expression="recaptchaValidationAction.prepareQr(flowRequestContext)"
			result="flashScope.prepareCaptchaResult" />
		<transition to="answerSecurityQr" />
	</action-state>


	<action-state id="lookupSecurityQuestion">
		<evaluate
			expression="ldapPasswordManagerService.getUserSecurityChallenge(flowScope.username)"
			result="flowScope.securityChallenge" />
		<transition to="testUserSecurityQuestionsSet" />
	</action-state>

	<decision-state id="testUserSecurityQuestionsSet">
		<if
			test="flowScope.securityChallenge != null 
                and flowScope.securityChallenge.questions != null
                and flowScope.securityChallenge.questions.size() > 1"
			then="answerSecurityQuestionEntry" else="lookupDefaultSecurityQuestions" />
	</decision-state>

	<action-state id="lookupDefaultSecurityQuestions">
		<evaluate
			expression="ldapPasswordManagerService.getDefaultSecurityChallenge(flowScope.username)"
			result="flowScope.securityChallenge" />
		<transition to="testDefaultSecurityQuestionsSet" />
	</action-state>

	<decision-state id="testDefaultSecurityQuestionsSet">
		<if
			test="flowScope.securityChallenge != null 
                and flowScope.securityChallenge.questions != null
                and flowScope.securityChallenge.questions.size() > 0"
			then="answerSecurityQuestionEntry" else="helpDeskView" />
	</decision-state>

	<!-- | This is an ancillary screen. You get here by passing through the 
		| 'forgotPassword' screen. It will display one of the following 2 options: 
		| - Your custom security question (if already set up) | - Your DOB + Student/Employee 
		Id (if not) + -->

	<action-state id="answerSecurityQuestionEntry">
		<set name="flowScope.responseAllowRepeat" value="true" />
		<transition to="answerSecurityQuestion" />
	</action-state>

	<view-state id="answerSecurityQuestion" view="casPmAnswerSecurityQuestion">
		<transition on="submitAnswer" to="checkSecurityQuestionResponse" />
	</view-state>

	<action-state id="checkSecurityQuestionResponse">
		<evaluate expression="checkSecurityQuestionResponseAction" />
		<!-- <transition on="success" to="answerSecurityToken"> -->
		<!-- <transition on="success" to="sendTFAToken"> -->
		<transition on="success" to="selectTokenModel">
			<evaluate
				expression="securityTokenHandlerAction.getOTPMode(flowScope.username, flowRequestContext)"
				result="flowScope.tokenModeOption" />
		</transition>
		<transition on="error" to="checkAnswerSecurityQuestionRetry">
			<set name="requestScope.securityQuestionValidationError" value="true" />
		</transition>
	</action-state>

	<view-state id="selectTokenModel" 
		view="casSelectTokenModel">
		<transition on="submit" to="processSelectedToken">
			
		</transition>
	</view-state>

	
	<action-state id="processSelectedToken">
		<evaluate expression="securityTokenHandlerAction.getSelectedTokenMode('otpMode', flowRequestContext)" result="flowScope.otpMode"/>
		<transition on="email" to="prepareEmailToken">
			
		</transition>
		<transition on="emailrsa" to="prepareEmailToken">
		</transition>
		
		<transition on="gsm">
		</transition>
		
		<transition on="rsa">
		</transition>
		
		<transition on="emailgsm"/> 

	</action-state>

	<!-- #prepare token -->
	<action-state id="prepareEmailToken">
		<evaluate
			expression="securityTokenHandlerAction.saveTokenChallenge(flowScope.mode, flowScope.username, flowRequestContext)" />
		<transition to="casCheckTFAToken" />
	</action-state>


	<decision-state id="answerSecurityToken">
		<if test="flowScope.pmTask eq 'checktoken'" then="checkToken"
			else="answerSecurityTokenOrg" />
	</decision-state>

	<action-state id="answerSecurityTokenOrg">
		<evaluate
			expression="securityTokenHandlerAction.prepareTokenChallenge(flowScope.username, flowRequestContext)"
			result="flowScope.tokenChallenge" />

		<transition to="answerSecurityTokenX" />
	</action-state>

	<decision-state id="checkAnswerSecurityQuestionRetry">
		<if test="flowScope.responseAllowRepeat" then="answerSecurityQuestionRetry"
			else="helpDeskView" />
	</decision-state>

	<action-state id="answerSecurityQuestionRetry">
		<set name="flowScope.responseAllowRepeat" value="false" />
		<transition to="answerSecurityQuestion" />
	</action-state>

	<!-- Token Response -->
	<!-- <view-state id="answerSecurityTokenX" view="casPmAnswerSecurityToken"> -->
	<action-state id="checkToken">
		<evaluate
			expression="securityTokenHandlerAction.prepareTFATokenChallenge(flashScope.mtoken, flowRequestContext)"
			result="flowScope.tokenChallenge" />
		<transition to="checkTokenValidity" />
	</action-state>

	<decision-state id="checkTokenValidity">
		<if test="flowScope.tokenChallenge != null" then="checkSecurityTokenResponseEntry"
			else="helpDeskView" />
	</decision-state>

	<action-state id="checkSecurityTokenResponseEntry">
		<set name="flowScope.responseAllowRepeat" value="true" />
		<transition to="checkTokenX" />
	</action-state>

	<view-state id="checkTokenX" view="casPmAnswerSecurityToken"
		model="netIdBean">
		<var name="netIdBean" class="com.antruak.cas.pm.flow.model.NetIdBean" />
		<binder>
			<binding property="netId" />
		</binder>
		<transition on="submitAnswer" to="checkSecurityTokenResponse">
			<set name="flowScope.username" value="netIdBean.netId" />
			<set name="flowScope.mtoken" value="flashScope.mtoken" />
		</transition>
		<transition on="resendToken" to="checkResendTokenEntry" />
	</view-state>

	<action-state id="checkSecurityTokenResponse">
		<evaluate expression="securityTokenHandlerAction" />
		<transition on="success" to="setPassword" />
		<transition to="checkSecurityTokenRepeat">
			<set name="requestScope.securityQuestionValidationError" value="true" />
		</transition>
	</action-state>

	<decision-state id="checkSecurityTokenRepeat">
		<if test="flowScope.responseAllowRepeat" then="securityTokenRetry"
			else="helpDeskView" />
	</decision-state>


	<action-state id="securityTokenRetry">
		<set name="flowScope.responseAllowRepeat" value="false" />
		<transition to="checkTokenX" />
	</action-state>



	<!-- QR -->

	<view-state id="answerSecurityQr" view="casPmAnswerSecurityQr">
		<transition on="submitAnswer" to="checkSecurityQrResponse" />
		<!-- <transition on="resendToken" to="checkResendTokenEntry" /> -->
	</view-state>

	<action-state id="checkSecurityQrResponse">
		<evaluate expression="securityTokenHandlerAction" />
		<transition on="success" to="setPassword" />
		<transition on="error" to="checkSecurityTokenRepeat">
			<set name="requestScope.securityQuestionValidationError" value="true" />
		</transition>
	</action-state>


	<action-state id="preSetupSecurityQuestion">
		<set name="flowScope.username" value="credentials.username" />
		<transition to="setupSecurityQuestion" />
	</action-state>

	<view-state id="setupSecurityQuestion" view="casPmSetupSecurityQuestion"
		model="securityQuestion">
		<var name="securityQuestion" class="com.antruak.cas.pm.flow.model.SecurityQuestionBean" />
		<binder>
			<binding property="questionText" />
			<binding property="responseText" />
		</binder>
		<transition on="setupSubmit" to="pmExit">
			<evaluate
				expression="processSecurityQuestionSetupAction.setSecurityQuestion(username,securityQuestion,messageContext)" />
		</transition>
	</view-state>

	<!-- <action-state id="processSecurityQuestionSetup"> <evaluate expression="processSecurityQuestionSetupAction" 
		/> <transition on="success" to="pmExit" /> <transition on="error" to="setupSecurityQuestion" 
		/> </action-state> -->

	<view-state id="passwordWarn" view="casWarnPassView">
		<transition on="changePassword" to="authdChangePassword" />
		<transition on="ignore" to="pmExit" />
	</view-state>

	<end-state id="helpDeskView" view="casPmHelpDesk">
		<on-entry>
			<evaluate
				expression="securityTokenHandlerAction.processException(flowRequestContext)" />
		</on-entry>
	</end-state>
	<view-state id="casCheckTFAToken" view="casCheckTFAToken">
		<transition to="pmExit" />
	</view-state>

	<view-state id="passwordSet" view="casPmSetPassword">
		<transition to="pmExit" />
	</view-state>

	<view-state id="lockedOut" view="casPmLockedOut">
		<transition to="pmExit" />
	</view-state>

	<end-state id="pmExit" />

	<global-transitions>
		<transition on-exception="javax.naming.NameNotFoundException"
			to="helpDeskView" />
		<transition on-exception="org.springframework.ldap.NameNotFoundException"
			to="helpDeskView" />
		<transition on-exception="com.antruak.cas.pm.UserLockedOutException"
			to="lockedOut" />
		<transition on-exception="java.lang.Exception" to="helpDeskView" />

	</global-transitions>
</flow>

